/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: ModTapHome {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "balanced";
            hold-trigger-key-positions = <13 14 15 16>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mods Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <190>;
            hold-trigger-key-positions = <19 20 21 22>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        CAPS_WORD {
            bindings = <&caps_word>;
            key-positions = <1 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans          &kp Q            &kp W         &kp E                              &kp R            &kp T        &kp Y      &kp U             &kp I                         &kp O         &kp P                     &trans
&sk LEFT_SHIFT  &hml LEFT_ALT A  &hml LCTRL S  &hml LEFT_SHIFT D                  &hml LEFT_GUI F  &kp G        &kp H      &hmr RIGHT_GUI J  &hmr RIGHT_SHIFT K            &hmr RCTRL L  &hmr RIGHT_ALT SEMICOLON  &sk RIGHT_SHIFT
&trans          &kp Z            &mt LG(X) X   &mt LG(C) C                        &mt LG(V) V      &kp B        &kp N      &kp M             &kp COMMA                     &kp DOT       &kp FSLH                  &trans
                                               &mt LG(LA(LC(LEFT_SHIFT))) DELETE  &lt 1 BACKSPACE  &lt 3 ESC    &kp SPACE  &lt 2 ENTER       &mt LS(LA(LEFT_CONTROL)) TAB
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &kp EXCLAMATION  &kp AT_SIGN   &kp POUND     &kp DLLR      &kp PRCNT       &kp CARET    &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans      &kp GRAVE        &kp APOS      &kp DQT       &kp LT        &kp GT          &kp PIPE     &kp MINUS  &kp PLUS   &kp LBRC  &kp RBRC  &trans
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp BSLH     &kp UNDER  &kp EQUAL  &kp LBKT  &kp RBKT  &trans
                                           &trans        &trans        &trans          &key_repeat  &kp TILDE  &trans
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &kp N4  &kp N5  &kp N6  &kp N0  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        iJandNav {
            bindings = <
&trans  &kp LG(NUMBER_1)  &kp LA(F12)    &kp F12        &kp LS(F6)     &kp LC(LS(R))     &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &trans  &trans
&trans  &kp LG(LS(A))     &kp LG(F6)     &kp LG(LS(S))  &kp LG(LA(F))  &kp LG(LS(N4))    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &kp LG(LA(N))     &kp LG(LA(M))  &kp LG(LA(C))  &kp LA(LG(V))  &kp LG(F9)        &trans    &trans         &trans       &trans     &trans  &trans
                                         &trans         &trans         &trans            &trans    &trans         &trans
            >;
        };
    };
};
